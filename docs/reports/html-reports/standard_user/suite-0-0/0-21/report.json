{"info":{"type":"runner","start":"2022-10-21T20:16:57.907Z","_duration":3669,"cid":"0-21","capabilities":{"acceptInsecureCerts":true,"browserName":"chrome","browserVersion":"106.0.5249.119","chrome":{"chromedriverVersion":"106.0.5249.61 (511755355844955cd3e264779baf0dd38212a4d0-refs/branch-heads/5249@{#569})","userDataDir":"/var/folders/l9/0w_wfpcx26d4vqw_xm9z_y_h0000gn/T/.com.google.Chrome.AvT2zo"},"goog:chromeOptions":{"debuggerAddress":"localhost:62417"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"mac os x","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"sessionId":"629f3bdd955a67d30999a06d454d1583"},"sanitizedCapabilities":"chrome.106_0_5249_119.macosx","config":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--incognito"]},"acceptInsecureCerts":true},"logLevel":"warn","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--incognito"]},"acceptInsecureCerts":true},"specs":["./test/specs/**/*.js"],"exclude":[],"suites":{},"baseUrl":"https://www.saucedemo.com/","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["allure",{"outputDir":"allure-results","disableWebdriverStepsReporting":true,"disableWebdriverScreenshotsReporting":false,"addConsoleLogs":true}],["html-nice",{"outputDir":"./docs/reports/html-reports/standard_user","filename":"report.html","reportTitle":"Sauce Demo Report for standard_user ","linkScreenshots":true,"showInBrowser":true,"collapseTests":false,"useOnAfterCommandForScreenshot":false}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"},"specs":["/private/tmp/webdriverio-saucedemo-testing/test/specs/reset1.e2e.js"],"sessionId":"629f3bdd955a67d30999a06d454d1583","isMultiremote":false,"instanceOptions":{"629f3bdd955a67d30999a06d454d1583":{"protocol":"http","hostname":"localhost","port":9515,"path":"/","capabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--incognito"]},"acceptInsecureCerts":true},"logLevel":"warn","connectionRetryTimeout":120000,"connectionRetryCount":3,"logLevels":{},"strictSSL":true,"requestedCapabilities":{"browserName":"chrome","goog:chromeOptions":{"args":["--incognito"]},"acceptInsecureCerts":true},"specs":["./test/specs/**/*.js"],"exclude":[],"suites":{},"baseUrl":"https://www.saucedemo.com/","bail":0,"waitforInterval":500,"waitforTimeout":10000,"framework":"mocha","reporters":["spec",["allure",{"outputDir":"allure-results","disableWebdriverStepsReporting":true,"disableWebdriverScreenshotsReporting":false,"addConsoleLogs":true}],["html-nice",{"outputDir":"./docs/reports/html-reports/standard_user","filename":"report.html","reportTitle":"Sauce Demo Report for standard_user ","linkScreenshots":true,"showInBrowser":true,"collapseTests":false,"useOnAfterCommandForScreenshot":false}]],"services":["chromedriver"],"execArgv":[],"maxInstances":10,"maxInstancesPerCapability":100,"filesToWatch":[],"onPrepare":[null],"onWorkerStart":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[],"onComplete":[null],"onReload":[],"automationProtocol":"webdriver"}},"retry":0,"failures":0,"retries":0,"end":"2022-10-21T20:17:01.576Z"},"metrics":{"passed":1,"skipped":0,"failed":0,"duration":3669,"start":"2022-10-21T20:16:57.907Z","end":"2022-10-21T20:17:01Z"},"title":"Sauce Demo Report for standard_user ","suites":[{"type":"suite:start","start":"2022-10-21T20:16:57.912Z","_duration":3609,"tests":[{"type":"test","start":"2022-10-21T20:16:57.913Z","_duration":3601,"uid":"test-00-0","cid":"0-21","title":"Reset_1: should be able to add two items to cart and zero it out by Reset App State from burger menu on the Inventory Page","fullTitle":"UserStory: Reset Cart State.Reset_1: should be able to add two items to cart and zero it out by Reset App State from burger menu on the Inventory Page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://www.saucedemo.com/"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://www.saucedemo.com/"},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#user-name"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#user-name"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"42a08556-99dc-4056-a19f-36ab885363d9"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/42a08556-99dc-4056-a19f-36ab885363d9/clear","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/42a08556-99dc-4056-a19f-36ab885363d9/clear","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/42a08556-99dc-4056-a19f-36ab885363d9/value","body":{"text":"standard_user"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/42a08556-99dc-4056-a19f-36ab885363d9/value","body":{"text":"standard_user"},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#password"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#password"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"898d7415-6cff-471a-bcbf-f222ab180810"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/898d7415-6cff-471a-bcbf-f222ab180810/clear","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/898d7415-6cff-471a-bcbf-f222ab180810/clear","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/898d7415-6cff-471a-bcbf-f222ab180810/value","body":{"text":"secret_sauce"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/898d7415-6cff-471a-bcbf-f222ab180810/value","body":{"text":"secret_sauce"},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#login-button"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#login-button"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"9cf63191-20a8-4197-a1e9-04ae72adb12d"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/9cf63191-20a8-4197-a1e9-04ae72adb12d/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/9cf63191-20a8-4197-a1e9-04ae72adb12d/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://www.saucedemo.com/inventory.html"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#header_container > div.header_secondary_container > span"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#header_container > div.header_secondary_container > span"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"6efab728-a34c-4594-89be-f6aabaeb0f2d"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/6efab728-a34c-4594-89be-f6aabaeb0f2d/text","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/6efab728-a34c-4594-89be-f6aabaeb0f2d/text","body":{},"result":{"value":"PRODUCTS"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#add-to-cart-sauce-labs-backpack"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#add-to-cart-sauce-labs-backpack"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"90161be0-f581-4e3e-b24e-8c6c0ab41f08"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/90161be0-f581-4e3e-b24e-8c6c0ab41f08/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/90161be0-f581-4e3e-b24e-8c6c0ab41f08/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#add-to-cart-sauce-labs-bike-light"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#add-to-cart-sauce-labs-bike-light"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"c284feff-35ed-438c-b332-0270469e9afb"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/c284feff-35ed-438c-b332-0270469e9afb/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/c284feff-35ed-438c-b332-0270469e9afb/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"d36d236e-970a-4e6d-8eb0-07e3ebf95c9f"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"d36d236e-970a-4e6d-8eb0-07e3ebf95c9f"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/d36d236e-970a-4e6d-8eb0-07e3ebf95c9f/text","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/elements","body":{"using":"css selector","value":".shopping_cart_badge"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/d36d236e-970a-4e6d-8eb0-07e3ebf95c9f/text","body":{},"result":{"value":"2"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#react-burger-menu-btn"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/elements","body":{"using":"css selector","value":".shopping_cart_badge"},"result":{"value":[{"element-6066-11e4-a52e-4f735466cecf":"d36d236e-970a-4e6d-8eb0-07e3ebf95c9f"}]},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#react-burger-menu-btn"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"85d624df-bcd5-4197-a401-94542c8dfd67"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/85d624df-bcd5-4197-a401-94542c8dfd67/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/85d624df-bcd5-4197-a401-94542c8dfd67/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#reset_sidebar_link"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#reset_sidebar_link"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a","ELEMENT":"6effd662-2c97-42d0-8f40-9383312a4e6a"}]},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a","ELEMENT":"6effd662-2c97-42d0-8f40-9383312a4e6a"}]},"result":{"value":true},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    // Edge before switching to Chromium\n    const isOldEdge = !!window.StyleMedia;\n    // returns true for Chrome and Firefox and false for Safari, Edge and IE\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    // get overlapping element\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    // get overlapping element rects (currently only the first)\n    // applicable if element's text is multiline.\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        // webdriver clicks on center of the first element's rect (line of text), it might change in future\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    // get overlapping elements\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    // is a node a descendant of a given node\n    function nodeContains(elem, otherNode) {\n        // Edge doesn't support neither Shadow Dom nor contains if ShadowRoot polyfill is used\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                // DocumentFragment / ShadowRoot polyfill like ShadyRoot\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    // is one of overlapping elements the `elem` or one of its child\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        // shadow root\n        // filter unique elements with shadowRoot\n        // @ts-ignore\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        // getOverlappingElements of every element with shadowRoot\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        // remove duplicates and parents\n        // @ts-ignore\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    // copied from `isElementInViewport.js`\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    // scroll to the element if it's not clickable\n    if (!isClickable(elem)) {\n        // works well in dialogs, but the element may be still overlapped by some sticky header/footer\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        // if element is still not clickable take another scroll attempt\n        if (!isClickable(elem)) {\n            // scroll to element, try put it in the screen center.\n            // Should definitely work even if element was covered with sticky header/footer\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a","ELEMENT":"6effd662-2c97-42d0-8f40-9383312a4e6a"}]},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    // Edge before switching to Chromium\n    const isOldEdge = !!window.StyleMedia;\n    // returns true for Chrome and Firefox and false for Safari, Edge and IE\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    // get overlapping element\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    // get overlapping element rects (currently only the first)\n    // applicable if element's text is multiline.\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        // webdriver clicks on center of the first element's rect (line of text), it might change in future\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    // get overlapping elements\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    // is a node a descendant of a given node\n    function nodeContains(elem, otherNode) {\n        // Edge doesn't support neither Shadow Dom nor contains if ShadowRoot polyfill is used\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                // DocumentFragment / ShadowRoot polyfill like ShadyRoot\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    // is one of overlapping elements the `elem` or one of its child\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        // shadow root\n        // filter unique elements with shadowRoot\n        // @ts-ignore\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        // getOverlappingElements of every element with shadowRoot\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        // remove duplicates and parents\n        // @ts-ignore\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    // copied from `isElementInViewport.js`\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    // scroll to the element if it's not clickable\n    if (!isClickable(elem)) {\n        // works well in dialogs, but the element may be still overlapped by some sticky header/footer\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        // if element is still not clickable take another scroll attempt\n        if (!isClickable(elem)) {\n            // scroll to element, try put it in the screen center.\n            // Should definitely work even if element was covered with sticky header/footer\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a","ELEMENT":"6effd662-2c97-42d0-8f40-9383312a4e6a"}]},"result":{"value":true},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/6effd662-2c97-42d0-8f40-9383312a4e6a/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/6effd662-2c97-42d0-8f40-9383312a4e6a/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#react-burger-cross-btn"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#react-burger-cross-btn"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a5aa3bad-27cd-49db-ba95-04cc539f5958"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/a5aa3bad-27cd-49db-ba95-04cc539f5958/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/a5aa3bad-27cd-49db-ba95-04cc539f5958/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://www.saucedemo.com/inventory.html"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#header_container > div.header_secondary_container > span"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"result":{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".shopping_cart_badge\"}\n  (Session info: chrome=106.0.5249.119)","stacktrace":"0   chromedriver                        0x000000010afea598 chromedriver + 4404632\n1   chromedriver                        0x000000010af71fa3 chromedriver + 3911587\n2   chromedriver                        0x000000010ac1ee6a chromedriver + 425578\n3   chromedriver                        0x000000010ac56c91 chromedriver + 654481\n4   chromedriver                        0x000000010ac56e91 chromedriver + 654993\n5   chromedriver                        0x000000010ac8e274 chromedriver + 881268\n6   chromedriver                        0x000000010ac74dcd chromedriver + 777677\n7   chromedriver                        0x000000010ac8bf79 chromedriver + 872313\n8   chromedriver                        0x000000010ac74bd3 chromedriver + 777171\n9   chromedriver                        0x000000010ac49ced chromedriver + 601325\n10  chromedriver                        0x000000010ac4ae51 chromedriver + 605777\n11  chromedriver                        0x000000010afba0ce chromedriver + 4206798\n12  chromedriver                        0x000000010afbe797 chromedriver + 4224919\n13  chromedriver                        0x000000010afc5a4f chromedriver + 4254287\n14  chromedriver                        0x000000010afbf4da chromedriver + 4228314\n15  chromedriver                        0x000000010af9823f chromedriver + 4067903\n16  chromedriver                        0x000000010afdc6a8 chromedriver + 4347560\n17  chromedriver                        0x000000010afdc816 chromedriver + 4347926\n18  chromedriver                        0x000000010aff18fe chromedriver + 4434174\n19  libsystem_pthread.dylib             0x00007ff81dc3c4e1 _pthread_start + 125\n20  libsystem_pthread.dylib             0x00007ff81dc37f6b thread_start + 15\n"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#header_container > div.header_secondary_container > span"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"6efab728-a34c-4594-89be-f6aabaeb0f2d"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/6efab728-a34c-4594-89be-f6aabaeb0f2d/text","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/6efab728-a34c-4594-89be-f6aabaeb0f2d/text","body":{},"result":{"value":"PRODUCTS"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"}],"retries":0,"parent":"UserStory: Reset Cart State","state":"passed","events":[],"errorIndex":0,"end":"2022-10-21T20:17:01.514Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2022-10-21T20:16:57.913Z","_duration":3601,"uid":"test-00-0","cid":"0-21","title":"Reset_1: should be able to add two items to cart and zero it out by Reset App State from burger menu on the Inventory Page","fullTitle":"UserStory: Reset Cart State.Reset_1: should be able to add two items to cart and zero it out by Reset App State from burger menu on the Inventory Page","output":[{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://www.saucedemo.com/"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://www.saucedemo.com/"},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#user-name"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#user-name"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"42a08556-99dc-4056-a19f-36ab885363d9"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/42a08556-99dc-4056-a19f-36ab885363d9/clear","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/42a08556-99dc-4056-a19f-36ab885363d9/clear","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/42a08556-99dc-4056-a19f-36ab885363d9/value","body":{"text":"standard_user"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/42a08556-99dc-4056-a19f-36ab885363d9/value","body":{"text":"standard_user"},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#password"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#password"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"898d7415-6cff-471a-bcbf-f222ab180810"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/898d7415-6cff-471a-bcbf-f222ab180810/clear","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/898d7415-6cff-471a-bcbf-f222ab180810/clear","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/898d7415-6cff-471a-bcbf-f222ab180810/value","body":{"text":"secret_sauce"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/898d7415-6cff-471a-bcbf-f222ab180810/value","body":{"text":"secret_sauce"},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#login-button"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#login-button"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"9cf63191-20a8-4197-a1e9-04ae72adb12d"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/9cf63191-20a8-4197-a1e9-04ae72adb12d/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/9cf63191-20a8-4197-a1e9-04ae72adb12d/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://www.saucedemo.com/inventory.html"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#header_container > div.header_secondary_container > span"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#header_container > div.header_secondary_container > span"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"6efab728-a34c-4594-89be-f6aabaeb0f2d"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/6efab728-a34c-4594-89be-f6aabaeb0f2d/text","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/6efab728-a34c-4594-89be-f6aabaeb0f2d/text","body":{},"result":{"value":"PRODUCTS"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#add-to-cart-sauce-labs-backpack"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#add-to-cart-sauce-labs-backpack"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"90161be0-f581-4e3e-b24e-8c6c0ab41f08"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/90161be0-f581-4e3e-b24e-8c6c0ab41f08/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/90161be0-f581-4e3e-b24e-8c6c0ab41f08/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#add-to-cart-sauce-labs-bike-light"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#add-to-cart-sauce-labs-bike-light"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"c284feff-35ed-438c-b332-0270469e9afb"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/c284feff-35ed-438c-b332-0270469e9afb/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/c284feff-35ed-438c-b332-0270469e9afb/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"d36d236e-970a-4e6d-8eb0-07e3ebf95c9f"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"d36d236e-970a-4e6d-8eb0-07e3ebf95c9f"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/d36d236e-970a-4e6d-8eb0-07e3ebf95c9f/text","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/elements","body":{"using":"css selector","value":".shopping_cart_badge"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/d36d236e-970a-4e6d-8eb0-07e3ebf95c9f/text","body":{},"result":{"value":"2"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#react-burger-menu-btn"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/elements","body":{"using":"css selector","value":".shopping_cart_badge"},"result":{"value":[{"element-6066-11e4-a52e-4f735466cecf":"d36d236e-970a-4e6d-8eb0-07e3ebf95c9f"}]},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#react-burger-menu-btn"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"85d624df-bcd5-4197-a401-94542c8dfd67"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/85d624df-bcd5-4197-a401-94542c8dfd67/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/85d624df-bcd5-4197-a401-94542c8dfd67/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#reset_sidebar_link"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#reset_sidebar_link"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a","ELEMENT":"6effd662-2c97-42d0-8f40-9383312a4e6a"}]},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        // if document-fragment, skip it and use element.host instead. This happens\n        // when the element is inside a shadow root.\n        // window.getComputedStyle errors on document-fragment.\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        // Ideally getPropertyValue would return the 'used' or 'actual' value, but\n        // it doesn't for legacy reasons. So we need to do our own poor man's cascade.\n        // Fall back to the first non-'inherit' value found in an ancestor.\n        // In any case, getPropertyValue will not return 'initial'.\n        // FIXME: will this incorrectly inherit non-inheritable CSS properties?\n        // I think all important non-inheritable properties (width, height, etc.)\n        // for our purposes here are specially resolved, so this may not be an issue.\n        // Specification is here: https://drafts.csswg.org/cssom/#resolved-values\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        // Paths can have a zero width or height. Treat them as shown if the stroke width is positive.\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        // If the container's overflow is not hidden and it has zero size, consider the\n        // container to have non-zero dimensions if a child node has non-zero dimensions.\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        // FIXME: this needs to take into account the scroll position of the element,\n        // the display modes of it and its ancestors, and the container it overflows.\n        // See Selenium's bot.dom.getOverflowState atom for an exhaustive list of edge cases.\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        // This element's subtree is hidden by overflow if all child subtrees are as well.\n        return Array.from(element.childNodes).every((childNode) => {\n            // Returns true if the child node is overflowed or otherwise hidden.\n            // Base case: not an element, has zero size, scrolled out, or doesn't overflow container.\n            // Visibility of text nodes is controlled by parent\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            // Recurse.\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    // walk up the tree testing for a shadow root\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    // This is a partial reimplementation of Selenium's \"element is displayed\" algorithm.\n    // When the W3C specification's algorithm stabilizes, we should implement that.\n    // If this command is misdirected to the wrong document (and is NOT inside a shadow root), treat it as not shown.\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    // Special cases for specific tag names.\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            // Option/optgroup are considered shown if the containing <select> is shown.\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            // <input type=\"hidden\"> is considered not shown.\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        // case 'MAP':\n        // FIXME: Selenium has special handling for <map> elements. We don't do anything now.\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a","ELEMENT":"6effd662-2c97-42d0-8f40-9383312a4e6a"}]},"result":{"value":true},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    // Edge before switching to Chromium\n    const isOldEdge = !!window.StyleMedia;\n    // returns true for Chrome and Firefox and false for Safari, Edge and IE\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    // get overlapping element\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    // get overlapping element rects (currently only the first)\n    // applicable if element's text is multiline.\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        // webdriver clicks on center of the first element's rect (line of text), it might change in future\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    // get overlapping elements\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    // is a node a descendant of a given node\n    function nodeContains(elem, otherNode) {\n        // Edge doesn't support neither Shadow Dom nor contains if ShadowRoot polyfill is used\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                // DocumentFragment / ShadowRoot polyfill like ShadyRoot\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    // is one of overlapping elements the `elem` or one of its child\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        // shadow root\n        // filter unique elements with shadowRoot\n        // @ts-ignore\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        // getOverlappingElements of every element with shadowRoot\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        // remove duplicates and parents\n        // @ts-ignore\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    // copied from `isElementInViewport.js`\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    // scroll to the element if it's not clickable\n    if (!isClickable(elem)) {\n        // works well in dialogs, but the element may be still overlapped by some sticky header/footer\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        // if element is still not clickable take another scroll attempt\n        if (!isClickable(elem)) {\n            // scroll to element, try put it in the screen center.\n            // Should definitely work even if element was covered with sticky header/footer\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a","ELEMENT":"6effd662-2c97-42d0-8f40-9383312a4e6a"}]},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    // Edge before switching to Chromium\n    const isOldEdge = !!window.StyleMedia;\n    // returns true for Chrome and Firefox and false for Safari, Edge and IE\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    // get overlapping element\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    // get overlapping element rects (currently only the first)\n    // applicable if element's text is multiline.\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        // webdriver clicks on center of the first element's rect (line of text), it might change in future\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    // get overlapping elements\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    // is a node a descendant of a given node\n    function nodeContains(elem, otherNode) {\n        // Edge doesn't support neither Shadow Dom nor contains if ShadowRoot polyfill is used\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                // DocumentFragment / ShadowRoot polyfill like ShadyRoot\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    // is one of overlapping elements the `elem` or one of its child\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        // shadow root\n        // filter unique elements with shadowRoot\n        // @ts-ignore\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        // getOverlappingElements of every element with shadowRoot\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        // remove duplicates and parents\n        // @ts-ignore\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    // copied from `isElementInViewport.js`\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    // scroll to the element if it's not clickable\n    if (!isClickable(elem)) {\n        // works well in dialogs, but the element may be still overlapped by some sticky header/footer\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        // if element is still not clickable take another scroll attempt\n        if (!isClickable(elem)) {\n            // scroll to element, try put it in the screen center.\n            // Should definitely work even if element was covered with sticky header/footer\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"6effd662-2c97-42d0-8f40-9383312a4e6a","ELEMENT":"6effd662-2c97-42d0-8f40-9383312a4e6a"}]},"result":{"value":true},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/6effd662-2c97-42d0-8f40-9383312a4e6a/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/6effd662-2c97-42d0-8f40-9383312a4e6a/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#react-burger-cross-btn"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#react-burger-cross-btn"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a5aa3bad-27cd-49db-ba95-04cc539f5958"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/a5aa3bad-27cd-49db-ba95-04cc539f5958/click","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/a5aa3bad-27cd-49db-ba95-04cc539f5958/click","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/url","body":{},"result":{"value":"https://www.saucedemo.com/inventory.html"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#header_container > div.header_secondary_container > span"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":".shopping_cart_badge"},"result":{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".shopping_cart_badge\"}\n  (Session info: chrome=106.0.5249.119)","stacktrace":"0   chromedriver                        0x000000010afea598 chromedriver + 4404632\n1   chromedriver                        0x000000010af71fa3 chromedriver + 3911587\n2   chromedriver                        0x000000010ac1ee6a chromedriver + 425578\n3   chromedriver                        0x000000010ac56c91 chromedriver + 654481\n4   chromedriver                        0x000000010ac56e91 chromedriver + 654993\n5   chromedriver                        0x000000010ac8e274 chromedriver + 881268\n6   chromedriver                        0x000000010ac74dcd chromedriver + 777677\n7   chromedriver                        0x000000010ac8bf79 chromedriver + 872313\n8   chromedriver                        0x000000010ac74bd3 chromedriver + 777171\n9   chromedriver                        0x000000010ac49ced chromedriver + 601325\n10  chromedriver                        0x000000010ac4ae51 chromedriver + 605777\n11  chromedriver                        0x000000010afba0ce chromedriver + 4206798\n12  chromedriver                        0x000000010afbe797 chromedriver + 4224919\n13  chromedriver                        0x000000010afc5a4f chromedriver + 4254287\n14  chromedriver                        0x000000010afbf4da chromedriver + 4228314\n15  chromedriver                        0x000000010af9823f chromedriver + 4067903\n16  chromedriver                        0x000000010afdc6a8 chromedriver + 4347560\n17  chromedriver                        0x000000010afdc816 chromedriver + 4347926\n18  chromedriver                        0x000000010aff18fe chromedriver + 4434174\n19  libsystem_pthread.dylib             0x00007ff81dc3c4e1 _pthread_start + 125\n20  libsystem_pthread.dylib             0x00007ff81dc37f6b thread_start + 15\n"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#header_container > div.header_secondary_container > span"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"6efab728-a34c-4594-89be-f6aabaeb0f2d"}},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/6efab728-a34c-4594-89be-f6aabaeb0f2d/text","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/6efab728-a34c-4594-89be-f6aabaeb0f2d/text","body":{},"result":{"value":"PRODUCTS"},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":null},"sessionId":"629f3bdd955a67d30999a06d454d1583","cid":"0-21","type":"result"}],"retries":0,"parent":"UserStory: Reset Cart State","state":"passed","events":[],"errorIndex":0,"end":"2022-10-21T20:17:01.514Z"}],"uid":"suite-0-0","cid":"0-21","file":"/private/tmp/webdriverio-saucedemo-testing/test/specs/reset1.e2e.js","title":"UserStory: Reset Cart State","fullTitle":"UserStory: Reset Cart State","parent":"","end":"2022-10-21T20:17:01.522Z"}],"reportFile":"/private/tmp/webdriverio-saucedemo-testing/docs/reports/html-reports/standard_user/suite-0-0/0-21/report.html"}